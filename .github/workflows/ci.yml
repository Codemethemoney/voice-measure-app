name: CI/CD Pipeline

on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main, development ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'
        cache: 'npm'
    - name: Install Dependencies
      run: |
        npm install -g prettier eslint
        cd backend && npm install
        cd ../frontend && npm install
    - name: Run Linting
      run: |
        cd backend && npm run lint
        cd ../frontend && npm run lint
    - name: Check Formatting
      run: npx prettier --check "**/*.{js,jsx,ts,tsx,json,md}"

  test-backend:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: voice_measure_test
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
    - uses: actions/checkout@v2
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'
        cache: 'npm'
    - name: Install Dependencies
      run: |
        cd backend
        npm ci
    - name: Run Tests
      run: |
        cd backend
        npm test
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/voice_measure_test
        JWT_SECRET: test-secret
    - name: Upload Coverage
      uses: actions/upload-artifact@v2
      with:
        name: backend-coverage
        path: backend/coverage

  test-frontend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'
        cache: 'npm'
    - name: Install Dependencies
      run: |
        cd frontend
        npm ci
    - name: Run Tests
      run: |
        cd frontend
        npm test -- --coverage
    - name: Upload Coverage
      uses: actions/upload-artifact@v2
      with:
        name: frontend-coverage
        path: frontend/coverage

  build:
    needs: [lint, test-backend, test-frontend]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'
        cache: 'npm'
    - name: Build Backend
      run: |
        cd backend
        npm ci
        npm run build
    - name: Build Frontend
      run: |
        cd frontend
        npm ci
        npm run build
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: build-artifacts
        path: |
          backend/dist
          frontend/build

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v2
    - name: Download Build Artifacts
      uses: actions/download-artifact@v2
      with:
        name: build-artifacts
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Build and Push Docker Images
      run: |
        docker-compose -f docker-compose.yml -f docker-compose.prod.yml build
        docker-compose -f docker-compose.yml -f docker-compose.prod.yml push
